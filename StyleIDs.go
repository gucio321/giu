package giu

import "github.com/AllenDang/cimgui-go"

// Here are the style IDs for styling cimgui apps.
// For details about each of attributes read comment above them.

// go-generate String() andStringToEnum methods
//go:generate stringer -type=StyleColorID,StyleVarID -output=StyleIDs_string.go -linecomment
// NOTE: string2enum is https://github.com/mewspring/tools
//go:generate string2enum -samepkg -type=StyleColorID,StyleVarID -output=StyleIDs_string2enum.go -linecomment

// StyleColorID identifies a color in the UI style.
type StyleColorID cimgui.Col

// StyleColor identifier.
// NOTE: comments are used for CSS conversion and are generated by stringer and string2enum.
const (
	StyleColorText                  = StyleColorID(cimgui.Col_Text)                  // color
	StyleColorTextDisabled          = StyleColorID(cimgui.Col_TextDisabled)          // disabled-color
	StyleColorWindowBg              = StyleColorID(cimgui.Col_WindowBg)              // background-color
	StyleColorChildBg               = StyleColorID(cimgui.Col_ChildBg)               // child-background-color
	StyleColorPopupBg               = StyleColorID(cimgui.Col_PopupBg)               // popup-background-color
	StyleColorBorder                = StyleColorID(cimgui.Col_Border)                // border-color
	StyleColorBorderShadow          = StyleColorID(cimgui.Col_BorderShadow)          // border-shadow-color
	StyleColorFrameBg               = StyleColorID(cimgui.Col_FrameBg)               // frame-background-color
	StyleColorFrameBgHovered        = StyleColorID(cimgui.Col_FrameBgHovered)        // frame-background-hovered-color
	StyleColorFrameBgActive         = StyleColorID(cimgui.Col_FrameBgActive)         // frame-background-active-color
	StyleColorTitleBg               = StyleColorID(cimgui.Col_TitleBg)               // title-background-color
	StyleColorTitleBgActive         = StyleColorID(cimgui.Col_TitleBgActive)         // title-background-active-color
	StyleColorTitleBgCollapsed      = StyleColorID(cimgui.Col_TitleBgCollapsed)      // title-background-collapsed-color
	StyleColorMenuBarBg             = StyleColorID(cimgui.Col_MenuBarBg)             // menu-bar-background-color
	StyleColorScrollbarBg           = StyleColorID(cimgui.Col_ScrollbarBg)           // scrollbar-background-color
	StyleColorScrollbarGrab         = StyleColorID(cimgui.Col_ScrollbarGrab)         // scrollbar-grab-color
	StyleColorScrollbarGrabHovered  = StyleColorID(cimgui.Col_ScrollbarGrabHovered)  // scrollbar-grab-hovered-color
	StyleColorScrollbarGrabActive   = StyleColorID(cimgui.Col_ScrollbarGrabActive)   // scrollbar-grab-active-color
	StyleColorCheckMark             = StyleColorID(cimgui.Col_CheckMark)             // checkmark-color
	StyleColorSliderGrab            = StyleColorID(cimgui.Col_SliderGrab)            // slider-grab-color
	StyleColorSliderGrabActive      = StyleColorID(cimgui.Col_SliderGrabActive)      // slider-grab-active-color
	StyleColorButton                = StyleColorID(cimgui.Col_Button)                // button-color
	StyleColorButtonHovered         = StyleColorID(cimgui.Col_ButtonHovered)         // button-hovered-color
	StyleColorButtonActive          = StyleColorID(cimgui.Col_ButtonActive)          // button-active-color
	StyleColorHeader                = StyleColorID(cimgui.Col_Header)                // header-color
	StyleColorHeaderHovered         = StyleColorID(cimgui.Col_HeaderHovered)         // header-hovered-color
	StyleColorHeaderActive          = StyleColorID(cimgui.Col_HeaderActive)          // header-active-color
	StyleColorSeparator             = StyleColorID(cimgui.Col_Separator)             // separator-color
	StyleColorSeparatorHovered      = StyleColorID(cimgui.Col_SeparatorHovered)      // separator-hovered-color
	StyleColorSeparatorActive       = StyleColorID(cimgui.Col_SeparatorActive)       // separator-active-color
	StyleColorResizeGrip            = StyleColorID(cimgui.Col_ResizeGrip)            // resize-grip-color
	StyleColorResizeGripHovered     = StyleColorID(cimgui.Col_ResizeGripHovered)     // resize-grip-hovered-color
	StyleColorResizeGripActive      = StyleColorID(cimgui.Col_ResizeGripActive)      // resize-grip-active-color
	StyleColorTab                   = StyleColorID(cimgui.Col_Tab)                   // tab-color
	StyleColorTabHovered            = StyleColorID(cimgui.Col_TabHovered)            // tab-hovered-color
	StyleColorTabActive             = StyleColorID(cimgui.Col_TabActive)             // tab-active-color
	StyleColorTabUnfocused          = StyleColorID(cimgui.Col_TabUnfocused)          // tab-unfocused-color
	StyleColorTabUnfocusedActive    = StyleColorID(cimgui.Col_TabUnfocusedActive)    // tab-unfocused-active-color
	StyleColorPlotLines             = StyleColorID(cimgui.Col_PlotLines)             // plot-lines-color
	StyleColorPlotLinesHovered      = StyleColorID(cimgui.Col_PlotLinesHovered)      // plot-lines-hovered-color
	StyleColorProgressBarActive     = StyleColorPlotLinesHovered                     // progress-bar-active-color
	StyleColorPlotHistogram         = StyleColorID(cimgui.Col_PlotHistogram)         // plot-histogram-color
	StyleColorPlotHistogramHovered  = StyleColorID(cimgui.Col_PlotHistogramHovered)  // plot-histogram-hovered-color
	StyleColorTableHeaderBg         = StyleColorID(cimgui.Col_TableHeaderBg)         // table-header-background-color
	StyleColorTableBorderStrong     = StyleColorID(cimgui.Col_TableBorderStrong)     // table-border-strong-color
	StyleColorTableBorderLight      = StyleColorID(cimgui.Col_TableBorderLight)      // table-border-light-color
	StyleColorTableRowBg            = StyleColorID(cimgui.Col_TableRowBg)            // table-row-background-color
	StyleColorTableRowBgAlt         = StyleColorID(cimgui.Col_TableRowBgAlt)         // table-row-alternate-background-color
	StyleColorTextSelectedBg        = StyleColorID(cimgui.Col_TextSelectedBg)        // text-selected-background-color
	StyleColorDragDropTarget        = StyleColorID(cimgui.Col_DragDropTarget)        // drag-drop-target-color
	StyleColorNavHighlight          = StyleColorID(cimgui.Col_NavHighlight)          // navigation-highlight-color
	StyleColorNavWindowingHighlight = StyleColorID(cimgui.Col_NavWindowingHighlight) // windowing-highlight-color
	StyleColorNavWindowingDimBg     = StyleColorID(cimgui.Col_NavWindowingDimBg)     // windowing-dim-background-color
	StyleColorModalWindowDimBg      = StyleColorID(cimgui.Col_ModalWindowDimBg)      // modal-window-dim-background-color
)

// StyleVarID identifies a style variable in the UI style.
type StyleVarID cimgui.StyleVar

// Style IDs.
// comments at same line is a CSS name.
const (
	// StyleVarAlpha is a float.
	StyleVarAlpha = StyleVarID(cimgui.StyleVar_Alpha) // alpha
	// StyleVarDisabledAlpha is a float.
	StyleVarDisabledAlpha = StyleVarID(cimgui.StyleVar_DisabledAlpha) // disabled-alpha
	// StyleVarWindowPadding is a Vec2.
	StyleVarWindowPadding = StyleVarID(cimgui.StyleVar_WindowPadding) // window-padding
	// StyleVarWindowRounding is a float.
	StyleVarWindowRounding = StyleVarID(cimgui.StyleVar_WindowRounding) // window-rounding
	// StyleVarWindowBorderSize is a float.
	StyleVarWindowBorderSize = StyleVarID(cimgui.StyleVar_WindowBorderSize) // window-border-size
	// StyleVarWindowMinSize is a Vec2.
	StyleVarWindowMinSize = StyleVarID(cimgui.StyleVar_WindowMinSize) // window-min-size
	// StyleVarWindowTitleAlign is a Vec2.
	StyleVarWindowTitleAlign = StyleVarID(cimgui.StyleVar_WindowTitleAlign) // window-title-align
	// StyleVarChildRounding is a float.
	StyleVarChildRounding = StyleVarID(cimgui.StyleVar_ChildRounding) // child-rounding
	// StyleVarChildBorderSize is a float.
	StyleVarChildBorderSize = StyleVarID(cimgui.StyleVar_ChildBorderSize) // child-border-size
	// StyleVarPopupRounding is a float.
	StyleVarPopupRounding = StyleVarID(cimgui.StyleVar_PopupRounding) // popup-rounding
	// StyleVarPopupBorderSize is a float.
	StyleVarPopupBorderSize = StyleVarID(cimgui.StyleVar_PopupBorderSize) // popup-border-size
	// StyleVarFramePadding is a Vec2.
	StyleVarFramePadding = StyleVarID(cimgui.StyleVar_FramePadding) // frame-padding
	// StyleVarFrameRounding is a float.
	StyleVarFrameRounding = StyleVarID(cimgui.StyleVar_FrameRounding) // frame-rounding
	// StyleVarFrameBorderSize is a float.
	StyleVarFrameBorderSize = StyleVarID(cimgui.StyleVar_FrameBorderSize) // frame-border-size
	// StyleVarItemSpacing is a Vec2.
	StyleVarItemSpacing = StyleVarID(cimgui.StyleVar_ItemSpacing) // item-spacing
	// StyleVarItemInnerSpacing is a Vec2.
	StyleVarItemInnerSpacing = StyleVarID(cimgui.StyleVar_ItemInnerSpacing) // item-inner-spacing
	// StyleVarIndentSpacing is a float.
	StyleVarIndentSpacing = StyleVarID(cimgui.StyleVar_IndentSpacing) // indent-spacing
	// StyleVarScrollbarSize is a float.
	StyleVarScrollbarSize = StyleVarID(cimgui.StyleVar_ScrollbarSize) // scrollbar-size
	// StyleVarScrollbarRounding is a float.
	StyleVarScrollbarRounding = StyleVarID(cimgui.StyleVar_ScrollbarRounding) // scrollbar-rounding
	// StyleVarGrabMinSize is a float.
	StyleVarGrabMinSize = StyleVarID(cimgui.StyleVar_GrabMinSize) // grab-min-size
	// StyleVarGrabRounding is a float.
	StyleVarGrabRounding = StyleVarID(cimgui.StyleVar_GrabRounding) // grab-rounding
	// StyleVarTabRounding is a float.
	StyleVarTabRounding = StyleVarID(cimgui.StyleVar_TabRounding) // tab-rounding
	// StyleVarButtonTextAlign is a Vec2.
	StyleVarButtonTextAlign = StyleVarID(cimgui.StyleVar_ButtonTextAlign) // button-text-align
	// StyleVarSelectableTextAlign is a Vec2.
	StyleVarSelectableTextAlign = StyleVarID(cimgui.StyleVar_SelectableTextAlign) // selectable-text-align
)

// IsVec2 returns true if the style var id should be processed as cimgui.ImVec2
// if not, it is interpreted as float32.
func (i StyleVarID) IsVec2() bool {
	lookup := map[StyleVarID]bool{
		// StyleVarWindowPadding is a Vec2.
		StyleVarWindowPadding:    true,
		StyleVarWindowMinSize:    true,
		StyleVarWindowTitleAlign: true,
		StyleVarFramePadding:     true,
		StyleVarItemSpacing:      true,
		// StyleVarItemInnerSpacing is a Vec2.
		StyleVarItemInnerSpacing:    true,
		StyleVarButtonTextAlign:     true,
		StyleVarSelectableTextAlign: true,
	}

	result, ok := lookup[i]

	return result && ok
}
